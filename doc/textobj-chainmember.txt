*textobj-chainmember.txt* Text objects for chained method calls and member
access

Author: D4KU
License: Same terms as Vim itself (see |license|)


DESCRIPTION     *textobj-chainmember*

This plugin provides |text-objects| to select chained method calls and member
accesses (members of a member chain, if you will). It does not rely on Vim's
syntax items and therefore works regardless of whether the file type is
correctly set.

Note This plugin depends on the |textobj-user| plugin, version 0.4.0.
https://github.com/kana/vim-textobj-user

USAGE      *textobj-chainmember-usage*

The notation of the following examples is borrowed from the |targets.vim|
plugin. Quoting its documentation:
>
    The following examples are displayed as three lines each. The top line
    denotes cursor positions from where the presented command works. The
    middle line shows the contents of the example line that we're working on.
    The last line shows the part of the line that the command will operate on.

For `am`, the first chain member includes the dot to its right:
    cursor position │ ..... ~
    buffer line     │ first.second.third ~
    selection       │ └ am ┘ ~

..., all following members the one to their left:
         ....... ~
    first.second.third ~
         └ am ─┘ ~

`im` does not include the dot:
         ....... ~
    first.second.third ~
          └ im ┘ ~

Method calls can be selected outside their argument list:
         ........          . ~
    first.second(arg1, arg2).third ~
         └────── am ───────┘ ~

Dots and other special characters inside the argument list are skipped:
         ........               . ~
    first.second(arg1.var, foo()).third ~
         └───────── am ─────────┘ ~

Inside the argument list, the outside is ignored:
                 ...... ~
    first.second(foobar.var, arg2).third ~
                 └ am ─┘ ~

Chars and string contents are ignored:
         ........         . ~
    first.second(") ", '.').third ~
         └────── am ──────┘ ~

Type parameters are no problem, either:
         ........              ... ~
    first.second<Type.InnerType>().third ~
         └────────── am ─────────┘ ~

..., nor are (multi-dimensional) arrays:
         ........         .. . ~
    first.second[foo.index][j].third ~
         └─────── am ────────┘ ~

... and curried function calls:
         ........       ..          . ~
    first.second(foo.bar)(foobar.baz).third ~
         └─────────── am ───────────┘ ~

More than one member can be selected:
    ..... ~
    first.second.third ~
    └─── 2im ──┘ ~

..., or the *next* or *last* one:
    ..... ~
    first.second.third ~
         └ anm ┘ ~

                ...... ~
    first.second.third ~
         └ alm ┘ ~

..., which can be combined with a count:
    ..... ~
    first.second.third ~
         └── 2anm ───┘ ~


MAPPINGS     *textobj-chainmember-mappings*

The text object mappings `am` and `im` are defined in |Visual| and
|Operator-pending| mode, mapped to named <Plug> mappings and can be
customized. For example, to use `ac` instead of `am`: >

    let g:textobj_chainmember_no_default_key_mappings = 1
    xmap ac <Plug>(textobj-chainmember-a)
    omap ac <Plug>(textobj-chainmember-a)

Consult the |textobj-user| documentation for additional information.

      *<Plug>(textobj-chainmember-a)*
am   <Plug>(textobj-chainmember-a)
   "a chainmember", select [count] chain members with the dot to their left.
   For the first member in a chain, the dot to its right is chosen.

      *<Plug>(textobj-chainmember-i)*
im   <Plug>(textobj-chainmember-i)
   "inner chainmember", select [count] chain members without their dot.

      *<Plug>(textobj-chainmember-last-a)*
alm  <Plug>(textobj-chainmember-last-a)
   "a last chainmember", select the [count] last chain members with the dot to
   their left. For the first member in a chain, the dot to its right is
   chosen.

      *<Plug>(textobj-chainmember-last-i)*
ilm  <Plug>(textobj-chainmember-last-i)
   "inner last chainmember", select the [count] last chain members without
   their dot.

      *<Plug>(textobj-chainmember-next-a)*
anm  <Plug>(textobj-chainmember-next-a)
   "a next chainmember", select the [count] next chain members with the dot to
   their left.

      *<Plug>(textobj-chainmember-next-i)*
inm  <Plug>(textobj-chainmember-next-i)
   "inner next chainmember", select the [count] next chain members without
   their dot.

       *g:textobj_chainmember_no_default_key_mappings*
g:textobj_chainmember_no_default_key_mappings
   Whether or not to define the default key mappings.
   Set this to "1" if you would like to disable the
   default key mappings.


LIMITATIONS     *textobj-chainmember-limitations*

With the cursor inside a string, spaces create problems:
                    ...... ~
    first.second("  foobar").third ~
                   └──── am ─────┘ ~

..., as do parenthesis/brackets/braces:
                  . ~
    first.second("([{<").third ~
                 └─ am ─┘ ~

With the cursor outside of strings, everything is okay, though:
         ........        . ~
    first.second("  ([{<").third ~
         └───── am ──────┘ ~

If a statement wraps over multiple lines, the plugin will not find code on
other lines than the current one:
                     . ~
         fourth.fifth) ~
    └────── am ──────┘ ~

Floats are handled as if digits were letters:
     ...... ~
    1.34567 ~
     └ am ┘ ~

Escaped quotes are not recognized as such. The decision to not support them is
primarily based on the fact that constructs like C-Sharp's `@"\"` would add
additional complexity.
         ........ ~
    first.second("\"").third ~
         └─────── am ──────┘ ~


CHANGELOG     *textobj-chainmember-changelog*

1.0.0 2021-07-04
 Initial release.


 vim:tw=78:ts=8:ft=help:norl:
